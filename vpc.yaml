AWSTemplateFormatVersion: '2010-09-09'

Parameters:

  VpcCidr:
    Type: String
    Description: CIDR block for VPC (use a /16 CIDR notation for this lab)
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid CIDR range in the form n.n.n.n/nn
    Default: 10.20.0.0/16

  SubnetPublicACidr:
    Type: String
    Description: CIDR block for public subnet A
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid CIDR range in the form n.n.n.n/nn
    Default: 10.20.1.0/24

  SubnetPublicBCidr:
    Type: String
    Description: CIDR block for public subnet B
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid CIDR range in the form n.n.n.n/nn
    Default: 10.20.2.0/24

Resources:

  S3Bucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration: 
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: "Role"
          Value: "Persistent Data Storage"

  Vpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VpcCidr
      Tags:
        - Key: "Name"
          Value: "lab-vpc"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VpcGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  # The subnet resources below utilize the Select and GetAZs intrinsic functions.
  # How they're used is a little deeper than an introductory workshop calls for
  # but if you're interested in learning more about them on your own, check out:
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-select.html
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getavailabilityzones.html

  SubnetPublicA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: !Ref SubnetPublicACidr
      MapPublicIpOnLaunch: false
      VpcId: !Ref Vpc

  SubnetPublicB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      CidrBlock: !Ref SubnetPublicBCidr
      MapPublicIpOnLaunch: false
      VpcId: !Ref Vpc

  SubnetRouteTableAssociatePublicA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublicA

  SubnetRouteTableAssociatePublicB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublicB

  # The resource below includes a DependsOn attribute to ensure that the
  # Internet Gateway is attached to the VPC before the route that relies
  # on the Internet Gateway is created.

  RouteDefaultPublic:
    Type: "AWS::EC2::Route"
    DependsOn: VpcGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTablePublic

  RouteTablePublic:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref Vpc

Outputs:

  VpcId:
    Description: ID of  Infrastructure VPC
    Value: !Ref Vpc
    Export:
      Name: !Sub ${AWS::StackName}-VpcId
